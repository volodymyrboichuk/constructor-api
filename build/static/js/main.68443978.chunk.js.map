{"version":3,"sources":["features/counter/Counter.module.scss","communicator/base.communicator.js","communicator/communicator.js","communicator/index.js","reducers/counterSlice.js","features/counter/Counter.js","App.js","store/store.js","serviceWorker.js","index.js"],"names":["module","exports","BaseCommunicator","path","data","this","applyRequers","method","console","log","process","uri","BASE_URL","fetch","headers","body","JSON","stringify","response","json","Communicator","CommunicatorSingleton","_instance","Error","communicator","getInstance","slice","createSlice","name","initialState","value","reducers","increment","state","getCategories","decrement","incrementByAmount","action","rest","payload","go","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","className","styles","row","button","aria-label","onClick","textbox","onChange","e","target","Number","asyncButton","amount","setTimeout","App","href","rel","reducer","counterReducer","middleware","getDefaultMiddleware","logger","configureStore","devTools","preloadedState","enhancers","reduxBatch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","store","document","getElementById","URL","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","qwe"],"mappings":"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","file":"static/js/main.68443978.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__34v4x\",\"button\":\"Counter_button__34Ak8\",\"value\":\"Counter_value__2ry8r\",\"textbox\":\"Counter_textbox__2Hjzr\",\"asyncButton\":\"Counter_asyncButton__2SRkH Counter_button__34Ak8\"};","class BaseCommunicator {\n\n    applyGetRequest(path, data = {}) {\n        return this.applyRequers(path, 'GET', data);\n    }\n\n    applyPostRequest(path, data = {}) {\n        return this.applyRequers(path, 'POST', data);\n    }\n\n    applyPutRequest(path, data = {}) {\n        return this.applyRequers(path, 'PUT', data);\n    }\n\n    applyDeleteRequest(path, data = {}) {\n        return this.applyRequers(path, 'DELETE', data);\n    }\n\n    async applyRequers(path, method, data) {\n        console.log(process.env)\n        const uri = `${BaseCommunicator.BASE_URL}/${path}`\n        const response = await fetch(uri, {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json',\n                \n            },\n            body: JSON.stringify(data)\n        })\n        return await response.json();\n    }\n\n    static BASE_URL = 'https://kuhni-mk.herokuapp.com'\n}\n\nexport default BaseCommunicator;","import BaseCommunicator from './base.communicator';\n\nclass Communicator extends BaseCommunicator {\n\n\n    getCategories() {\n        return this.applyRequers('category');\n    }\n\n};\n\nexport default Communicator;","import Communicator from './communicator';\n\nclass CommunicatorSingleton {\n    static _instance = new CommunicatorSingleton();\n          \n    constructor() {\n      if (CommunicatorSingleton._instance) {\n          throw new Error(\"Instantiation failed: use Singleton.getInstance() instead of new.\");\n      } else {\n          this.communicator = new Communicator();\n      }\n    }\n  \n    static getInstance() {\n      return CommunicatorSingleton._instance.communicator;\n    }\n  }\n\n  export default CommunicatorSingleton.getInstance();","import { createSlice } from '@reduxjs/toolkit';\r\nimport communicator from '../communicator';\r\nexport const slice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      console.log(communicator)\r\n      communicator.getCategories()\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action, ...rest) => {\r\n      console.log(state)\r\n      console.log(action)\r\n      console.log(rest)\r\n      state.value += action.payload;\r\n    },\r\n    go: () => {}\r\n  },\r\n});\r\nconsole.log(slice)\r\n\r\nexport const { increment, decrement, incrementByAmount } = slice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default slice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  decrement,\r\n  increment,\r\n  incrementByAmount,\r\n  incrementAsync,\r\n  selectCount,\r\n} from '../../reducers/counterSlice';\r\nimport styles from './Counter.module.scss';\r\n\r\nexport function Counter() {\r\n  const count = useSelector(selectCount);\r\n  const dispatch = useDispatch();\r\n  const [incrementAmount, setIncrementAmount] = useState('2');\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Increment value\"\r\n          onClick={() => dispatch(increment())}\r\n        >\r\n          +\r\n        </button>\r\n        <span className={styles.value}>{count}</span>\r\n        <button\r\n          className={styles.button}\r\n          aria-label=\"Decrement value\"\r\n          onClick={() => dispatch(decrement())}\r\n        >\r\n          -\r\n        </button>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <input\r\n          className={styles.textbox}\r\n          aria-label=\"Set increment amount\"\r\n          value={incrementAmount}\r\n          onChange={e => setIncrementAmount(e.target.value)}\r\n        />\r\n        <button\r\n          className={styles.button}\r\n          onClick={() =>\r\n            dispatch(incrementByAmount(Number(incrementAmount) || 0))\r\n          }\r\n        >\r\n          Add Amount\r\n        </button>\r\n        <button\r\n          className={styles.asyncButton}\r\n          onClick={() => dispatch(incrementAsync(Number(incrementAmount) || 0))}\r\n        >\r\n          Add Async\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Counter } from './features/counter/Counter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Counter />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <span>\r\n          <span>Learn </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux\r\n          </a>\r\n          <span>, </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://redux-toolkit.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Redux Toolkit\r\n          </a>\r\n          ,<span> and </span>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://react-redux.js.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            React Redux\r\n          </a>\r\n        </span>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { reduxBatch } from '@manaflair/redux-batch'\r\nimport logger from 'redux-logger'\r\n\r\nimport counterReducer from '../reducers/counterSlice';\r\n\r\nconst reducer = {\r\n  counter: counterReducer,\r\n}\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger]\r\n\r\nexport default configureStore({\r\n  reducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  preloadedState: 0,\r\n  enhancers: [reduxBatch]\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nconst onSuccess = (qwe) => {\r\n  console.log('success', qwe)\r\n}\r\nconst onUpdate = (qwe) => {\r\n  console.log('update', qwe)\r\n}\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register({onSuccess, onUpdate});\r\n"],"sourceRoot":""}